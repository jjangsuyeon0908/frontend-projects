document 메소드 소개

1. document.write()

document.write는 HTML 문서에 텍스트나 HTML 요소를 직접 삽입

document.write("<h1>안녕하세요, 자바스크립트로 작성된 페이지입니다.</h1>");

2. document.getElementById()
- id를 통해 해당하는 HTML 요소를 가져오는 함수

3. document.getElementsByClassName()
- 클래스 이름을 가진 요소들을 배열로 반환

4. document.getElementsByTagName()
- 특정 태그를 가진 요소들을 배열로 반환

5. document.querySelector()

querySelector는 파라메터로 제공된 CSS 선택자의 첫 번째로 일치하는 요소를 반환

6. document.querySelectorAll()

파라메터로 제공된 CSS 선택자의 모든 요소를 반환

7. document.createElement()

새로운 HTML 요소를 동적으로 생성

8. document.createTextNode()

텍스트 노드를 생성(단순한 텍스트)

9. document.body
document 의 <body> 요소를 반환

10. document.title
페이지의 제목을 가져오거나 변경

11. document.forms

문서 내 모든 폼 요소를 반환

12. document.location

현재 페이지의 URL을 가져오거나 변경

13. document.getElementsByName()

with 구문이란?

코드 블록 내에서 특정 객체를 암시적으로 참조하도록 함
객체를 명시적으로 지정하지 않고도 그 객체의 속성에 접근할 수 있게 함

with(object) {
  // object 내의 속성 또는 메서드를 마치 전역변수처럼 사용할 수 있음
}

자바스크립트는 사실 with(window) 로 둘러 싸여 있는 것과 마찬가지
with(window)
{
  alert('helo');
}

let obj = {
  a: 1,
  b: 2
};

with(obj) {
  console.log(a + b);
  console.log(a);
}
-----------
DOM 요소 속성

1. innerText

innerText는 요소의 텍스트 콘텐츠를 가져오거나 설정
HTML 태그를 무시하고 순수한 텍스트만 가져옴

2. innerHTML
- 요소의 HTML 콘텐츠를 가져오거나 설정
- HTML 태그를 포함한 문자열을 다룰 수 있음

3. className

className은 요소의 클래스 속성을 문자열로 가져오거나 설정

4. style
- 요소의 인라인 스타일을 설정하거나 가져옴
-----------
이벤트 핸들러란?

- HTML 요소에서 발생하는 특정 이벤트(클릭, 로딩, 포커스 등)을 처리
- 여러개 등록 시 처음에 지정된 핸들러만 유효

자주 사용하는 이벤트 핸들러

클릭이벤트 (onclick)

마우스오버 이벤트

폼 제출 이벤트

페이지 로드 이벤트

키보드 입력 이벤트(onkeydown, onkeyup, onkeypress)

포커스 이벤트(onfocus, onblur)
-----------
이벤트 리스너란?

DOM 요소에서 발생하는 이벤트를 감지하고,
해당 이벤트가 발생할 때 자동으로 실행되는 함수