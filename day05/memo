자바스크립트 정규 표현식(Regular Expresson)이란?
- 문자열을 검색, 매칭, 치환 등을 처리하는 강력한 도구
- 특정 패턴을 문자열 내에서 찾아 내는 데 사용되며, 복잡한 문자열 검색과 처리를 효율적으로 할 수 있도록 함
- RegExp 객체를 사용하여 정규식을 다루며, 정규식 리터럴이나 생성자를 통해 생성

var longSent = `
Hello there! My email address is example.user123@example.com,  
and you can also reach me at test-email@domain.co.uk.  

I live in San Francisco, CA 94103.  
My phone numbers are +1-800-555-1234 and (415) 555-6789.  

Visit my website at https://www.example.com  
or http://example.org/test-page.  

Did you know that 42 is the answer to life,  
the universe, and everything?  

I paid $123.45 for a nice gadget on 01/15/2025,  
which was shipped on 01-16-2025.  

Some random text: @#$%^&*()_+!~.  

By the way, the quick brown fox jumps over the lazy dog 123 times.  

Here is a list of students:  
name: John Doe, age: 21, email: john.doe@example.com  
name: Jane Smith, age: 22, email: jane.smith@example.org
name: Alice Johnson, age: 20, email: alice20@gmail.com  
name: Bob Brown, age: 23, email: bob.brown22@university.edu  

Some repeated data:  
Invoice #001: $250.00 paid on 2025-01-01  
Invoice #002: $125.50 paid on 2025-01-02  
Invoice #003: $89.99 paid on 2025-01-03  

Random alphanumeric strings:  
A1B2C3D4E5  
X9Y8Z7W6V5U4T3S2  

Repeated names and ages for testing:  
name: Chris, age: 19  
name: Pat, age: 24  
name: Jordan, age: 18  
name: Alex, age: 22  

Logs from a system:  
[2025-01-15 12:00:00] INFO: System started  
[2025-01-15 12:01:00] ERROR: Missing configuration file  
[2025-01-15 12:02:00] WARNING: Low memory detected  
[2025-01-15 12:03:00] INFO: User logged in successfully  
[2025-01-15 12:04:00] INFO: Scheduled backup started  
[2025-01-15 12:05:00] WARNING: High CPU usage detected  
[2025-01-15 12:06:00] INFO: New configuration applied  
12025-01-15 12:07:00] INFO: Service restarted  
[2025-01-15 12:08:00] ERROR: Unable to connect to database  
[2025-01-15 12:09:00] WARNING: Disk usage at 85%  
[2025-01-15 12:10:00] INFO: Update check completed  
[2025-01-15 12:11:00] INFO: File uploaded successfully  
[2025-01-15 12:12:00] WARNING: Network latency detected  
[2025-01-15 12:13:00] INFO: New user registered  
[2025-01-15 12:14:00] ERROR: File not found: /tmp/config.json  
[2025-01-15 12:15:00] INFO: Scheduled task completed  
[2025-01-15 12:16:00] INFO: Memory usage within acceptable range  
[2025-01-15 12:17:00] WARNING: Low disk space  
[2025-01-15 12:18:00] INFO: Daily summary generated  
[2025-01-15 12:19:00] INFO: Security scan completed successfully  
[2025-01-15 12:20:00] INFO: System uptime: 12 hours  
[2025-01-15 12:21:00] WARNING: Unusual login attempt detected  
[2025-01-15 12:22:00] INFO: Database backup completed  
[2025-01-15 12:23:00] ERROR: Permission denied while accessing /etc/hosts  
[2025-01-15 12:24:00] INFO: Log rotation completed  

This text includes a variety of patterns for regular expression practice!
`;

console.log(longSent);

1. 정규식 생성 방법

- 리터럴 표기법
const regex = /pattern/flags;

- 생성자 표기법
const regex = new RegExp("pattern", "flags");

2. 정규식 메서드

test()
- 정규식에 해당하는 패턴이 문자열에 포함되어 있는지 확인
- 결과는 true 또는 false

let regex = /website/;

console.log(regex.test(longSent));

regex = /weBsite/;

console.log(regex.test(longSent));

match()
- 문자열에서 정규식과 일치하는 부분의 정보를 반환
- 변환되는 값은 플래그에 따라서 변경

let regex = /name/;
console.log(longSent.match(regex));

replace()
- 문자열의 정규식과 일치하는 부분을 파라메터로 제공한 문자열로 치환한 문자열을 반환

let regex = /there/;
console.log(longSent.replace(regex, "Everyone"));

search()
- 정규식과 일치하는 첫 번째 인덱스 반환

let regex = /My/;
console.log(longSent.search(regex));

split()
- 정규식을 기준으로 문자열을 나누어 배열로 반환

let regex = / /;
console.log(longSent.split(regex));

exec()
- 매칭된 문자열이 포함된 배열을 반환
- 배열에는 매치된 문자열의 시작 위치, 검색된 전체 문자열을 포함
- g플래그나 y플래그가 있을 경우 검색 상태를 유지하고 반복 호출로 순차적 탐색

let regex = /web\wite/;
console.log(regex.exec(longSent));

3. 플래그
- 정규식의 동작 방식을 제어하는 옵션
- 각 플래그는 특정 기능을 활성화하며, 여러 플래그를 조합하여 사용

g 플래그
- 전역 검색(Global search)
- 일치하는 패턴의 단어를 모두 반환

let regex = /name/g;

console.log(longSent.match(regex));

i 플래그
- 대소문자 구분하지 않음(case Insensitive)

let regex = /random/ig;

console.log(longSent.match(regex));

m 플래그
- 여러 줄 모드(Multiline)
- 줄바꿈을 기준으로 ^와 $를 각 줄에 대해 적용하도록 동작 방식을 확장
- 로그 분석, 줄 단위 데이터 처리 등에서 유용하게 사용

s 플래그
- 줄바꿈 문자와도 일치
- .은 줄바꿈 문자를 제외한 모든 문자와 일치, s플래그를 사용하면 줄바꿈 문자도 포함하여 모든 문자와 일치

u 플래그
- 유니코드 모드(Unicode)
- JavaScript의 정규식 엔진은 2바이트 문자인 BMP 영역의 문자들만 제대로 처리
- 유니코드에는 4바이트 문자도 존재하는데, 이들은 BMP 범위를 벗어난 문자
- 이모지나 고대 문자 등
- u 플래그는 유니코드 문자셋을 정확하게 처리
- 일반적인 유니코드 속성
	Letter: 문자 (예: \p{Letter})
	Uppercase_Letter: 대문자 문자 (예: \p{Uppercase_Letter})
	Lowercase_Letter: 소문자 문자 (예: \p{Lowercase_Letter})
	Titlecase_Letter: 타이틀 케이스 문자
	Other_Letter: 다른 유형의 문자
	Mark: 마크 문자 (조합 기호 등)
	Number: 숫자 문자
	Decimal_Number: 십진수 숫자
	Letter_Number: 문자로 표현된 숫자
	Other_Number: 다른 숫자 문자
	Punctuation: 구두점 문자
	Symbol: 기호 문자
	Other_Symbol: 기타 기호 문자
	Separator: 구분 기호 (예: 공백 문자)
  Emoji : 이모지 문자

let regex = /\p{Emoji}/g;
let text = "😀 Hello ❤️ world 🌍 🧑‍🚀";
console.log(text.match(regex));
let regex = /\p{Emoji}/ug;
console.log(text.match(regex));  // ["😀", "❤️", "🌍", "🧑‍🚀"]

y 플래그
- "sticky" 모드(현재 위치부터 검색)

let regex = /a/y;
let str = "aabcabc";

console.log(regex.lastIndex);
console.log(regex.exec(str));
console.log(regex.lastIndex);
console.log(regex.exec(str));
console.log(regex.lastIndex);
console.log(regex.exec(str));

let regex = /a/;
let str = "aabcabc";

console.log(regex.lastIndex);
console.log(regex.exec(str));
console.log(regex.lastIndex);
console.log(regex.exec(str));
console.log(regex.lastIndex);
console.log(regex.exec(str));

4. 메타문자
.
- 임의의 한 문자 (s플래그 제외 시 줄바꿈 제외)
- /a.c/는 abc, axc와 일치

\d
- 숫자 (0-9)

\D
- 숫자가 아닌 문자

\w
- 단어 문자 (알파벳, 숫자, _)

\W
- 단어 문자가 아닌 문자

\s
- 공백 문자 (스페이스, 탭, 줄바꿈 등)

\S
- 줄바꿈문자 또는 공백이 아닌 문자

4. 수량자
*
- 0회 이상
- /a*/는 "", "aaa"와도 일치

let regex = /F.*o/g

+
- 1회 이상

?
- 0회 또는 1회
- /a?b/는 "b", "ab"와 일치

{n}
- 정확히 n반 반복
- /a{3}/는 aaa 와 일치

{n,}
- n번 이상 반복
- /a{2,}/는 "aa", "aaa" 와 일치

{n,m}
- n번 이상, m번 이하
- /a{2,4}/ 는 "aa", "aaa", "aaaa" 와 일치

let regex = /\d{1,3}/g;

5. 경계

^
- 문자열의 시작
- /^hello/는 "hello world hello" 에서 앞의 hello와 일치

$
- 문자열의 끝
- /hello$/는 "hello world hello" 에서 뒤의 hello와 일치

\b
- 단어 경계
- /\bhello\b/ 는 "helloa world hello bhello" hello와 일치
- 특정 단어를 정확히 매칭하고 싶을 때 매우 유용

const text = "cat category scatter";
console.log(text.match(/cat/g));
console.log(text.match(/\bcat\b/g));

\B
- 단어 경계가 아님
- /\Bhello\B/ 는 "helloa world hello bhello" helloa의 hello, bhello의 hello 와 일치

const text = "cat category scatter";
console.log(text.match(/cat/g));
console.log(text.match(/cat\B/g));

6. 특별한 메타 문자
[]
- 대괄호 안에 있는 문자들 중 하나와 일치
- -를 사용하여 범위를 지정 e.g. [a-z]는 소문자 알파벳과 일치
- 대괄호 내의 일부 문자는 특수한 의미를 가짐 e.g. [^a-z] 는 소문자 알파벳이 아닌 문자와 일치

let regex = /[aeiou]/g;
console.log("hello world".match(regex));

let regex = /[0-9]/g;
console.log("abc123".match(regex));

let regex = /[^0-9]/g;
console.log("abc123".match(regex));

()
- 소괄호는 하위 표현식을 그룹화하여 하나의 단위로 취급
- 일치하는 문자열을 캡쳐하여 나중에 사용
- 캡쳐되지 않는 그룹은 (?:)로 표시

let regex = /(\d{3})-(\d{4})-(\d{4})/;
let phone = "010-1234-5678";

console.log(phone.match(regex));

let formatted = phone.replace(regex, "$1 / $2 / $3");
console.log(formatted);

-----

let regex = /(\d{3})-(\d{4})-(\d{4})/;
let phone = "010-1234-5678";

let match = phone.match(regex);
if(match) {
  let areaCode = match[1];
  let mainNumber = `${match[2]}-${match[3]}`;
  console.log(`지역 코드 : ${areaCode}`);
  console.log(`번호 : ${mainNumber}`);
}

-----

예제

- 이메일 검증
const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;

console.log(emailRegex.test("test@example.com"));
console.log(emailRegex.test("invalid-email"));

- URL 검증

const urlRegex = /^(https?:\/\/)?(www\.)?[a-z0-9.-]+\.[a-z]{2,}(\/[^\s]*)?$/i;
console.log(urlRegex.test("https://example.com")); // true
console.log(urlRegex.test("ftp://example.com"));   // false

- 전화번호 검증

const phoneRegex = /정규식작성/;
console.log(phoneRegex.test("+1-800-555-1234")); // true
console.log(phoneRegex.test("010-555-1234")); // true
console.log(phoneRegex.test("12345"));          // false